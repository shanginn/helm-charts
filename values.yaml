debug: false

serviceAccount:
  create: true
  name: "temporal"

server:
  enabled: true
  image:
    repository: temporalio/server
    tag: 1.22.4
    pullPolicy: IfNotPresent

  # Global default settings (can be overridden per service)
  replicaCount: 1
  metrics:
    annotations:
      enabled: true
    serviceMonitor:
      enabled: false
    prometheus:
      timerType: histogram

  config:
    logLevel: "debug,info"

    # IMPORTANT: This value cannot be changed, once it's set.
    numHistoryShards: 512

    persistence:
      defaultStore: default
      additionalStores: {}

      default:
        driver: "sql"

        sql:
          driver: "postgres"
          host: pgsql-postgresql.pgsql
          port: 5432
          database: temporal
          user: temporal_user
          existingSecret: temporal-default-store
          maxConns: 20
          maxConnLifetime: "1h"

      visibility:
        driver: "sql"

        sql:
          driver: "postgres"
          host: pgsql-postgresql.pgsql
          port: 5432
          database: temporal_visibility
          user: temporal_user
          existingSecret: temporal-visibility-store
          maxConns: 20
          maxConnLifetime: "1h"

  frontend:
    # replicaCount: 1
    service:
      annotations: {} # Evaluated as template
      type: ClusterIP
      port: 7233
    metrics:
      annotations:
        enabled: true
      serviceMonitor: {}
      # enabled: false
      prometheus: {}
      # timerType: histogram
    podAnnotations: {}
    podLabels: {}
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}

  history:
    # replicaCount: 1
    service:
      # type: ClusterIP
      port: 7234
    metrics:
      annotations:
        enabled: true
      serviceMonitor: {}
      # enabled: false
      prometheus: {}
      # timerType: histogram
    podAnnotations: {}
    podLabels: {}
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}

  matching:
    # replicaCount: 1
    service:
      # type: ClusterIP
      port: 7235
    metrics:
      annotations:
        enabled: false
      serviceMonitor: {}
      # enabled: false
      prometheus: {}
      # timerType: histogram
    podAnnotations: {}
    podLabels: {}
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}

  worker:
    # replicaCount: 1
    service:
      # type: ClusterIP
      port: 7239
    metrics:
      annotations:
        enabled: true
      serviceMonitor: {}
      # enabled: false
      prometheus: {}
      # timerType: histogram
    podAnnotations: {}
    podLabels: {}
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}

admintools:
  enabled: true
  image:
    repository: temporalio/admin-tools
    tag: 1.22.4
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 22
    annotations: {}
  podLabels: {}
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

web:
  enabled: true
  config:
    # server/config.yml file content
    auth:
      enabled: false
    routing:
      default_to_namespace: # internal use only
      issue_report_link: https://github.com/temporalio/web/issues/new/choose # set this field if you need to direct people to internal support forums


  replicaCount: 1

  image:
    repository: temporalio/ui
    tag: 2.21.4
    pullPolicy: IfNotPresent

  service:
    # set type to NodePort if access to web needs access from outside the cluster
    # for more info see https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    port: 8080
    annotations: {}
    # loadBalancerIP:

  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-secret: basic-auth
      nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
      cert-manager.io/issuer-kind: ClusterIssuer
      cert-manager.io/issuer: letsencrypt-prod
    hosts:
      - "temporal.shanginn.io"
    tls:
      - secretName: temporal-tls
        hosts:
        - "temporal.shanginn.io"

  podAnnotations: {}
  podLabels: {}

  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

schema:
  setup:
    enabled: false
  update:
    enabled: false

elasticsearch:
  enabled: false

prometheus:
  enabled: false

grafana:
  enabled: false

cassandra:
  enabled: false

mysql:
  enabled: false
